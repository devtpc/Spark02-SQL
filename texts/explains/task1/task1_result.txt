Completed in 4136 ms
Node                                                  | # Tasks | Duration total (min, med, max) | # Rows | Est # Rows | Peak Mem total (min, med, max)
------------------------------------------------------+---------+--------------------------------+--------+------------+-------------------------------
(1): Scan parquet spark_catalog.datalake.hotelweather | -       | -                              | -      | -          | -                             
(2): HashAggregate                                    | -       | -                              | -      | -          | -                             
(3): Exchange                                         | -       | -                              | -      | -          | -                             
(4): HashAggregate                                    | -       | -                              | -      | -          | -                             
(5): Exchange                                         | -       | -                              | -      | -          | -                             
(6): Sort                                             | -       | -                              | -      | -          | -                             
(7): RunningWindowFunction                            | -       | -                              | -      | -          | -                             
(8): Filter                                           | -       | -                              | -      | -          | -                             
(9): AdaptiveSparkPlan                                | -       | -                              | -      | -          | -                             
(10): AtomicReplaceTableAsSelect                      | -       | -                              | -      | -          | -          

== Physical Plan ==
AtomicReplaceTableAsSelect (10)
+- AdaptiveSparkPlan (9)
   +- Filter (8)
      +- RunningWindowFunction (7)
         +- Sort (6)
            +- Exchange (5)
               +- HashAggregate (4)
                  +- Exchange (3)
                     +- HashAggregate (2)
                        +- Scan parquet spark_catalog.datalake.hotelweather (1)


(1) Scan parquet spark_catalog.datalake.hotelweather
Output [9]: [address#11711, avg_tmpr_c#11712, avg_tmpr_f#11713, city#11714, country#11715, id#11717, name#11720, year#11722, month#11723]
Batched: true
Location: PreparedDeltaFileIndex [abfss://data@sttpdcsp02westeurope.dfs.core.windows.net/datalake/hotelweather]
ReadSchema: struct<address:string,avg_tmpr_c:double,avg_tmpr_f:double,city:string,country:string,id:string,name:string,year:int,month:int>

(2) HashAggregate
Input [9]: [address#11711, avg_tmpr_c#11712, avg_tmpr_f#11713, city#11714, country#11715, id#11717, name#11720, year#11722, month#11723]
Keys [7]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723]
Functions [4]: [partial_min(avg_tmpr_c#11712) AS min#11786, partial_max(avg_tmpr_c#11712) AS max#11788, partial_min(avg_tmpr_f#11713) AS min#11790, partial_max(avg_tmpr_f#11713) AS max#11792]
Aggregate Attributes [4]: [min#11785, max#11787, min#11789, max#11791]
Results [11]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, min#11786, max#11788, min#11790, max#11792]

(3) Exchange
Input [11]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, min#11786, max#11788, min#11790, max#11792]
Arguments: hashpartitioning(id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, 200), ENSURE_REQUIREMENTS, [plan_id=5143]

(4) HashAggregate
Input [11]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, min#11786, max#11788, min#11790, max#11792]
Keys [7]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723]
Functions [4]: [finalmerge_min(merge min#11786) AS min(avg_tmpr_c#11712)#11729, finalmerge_max(merge max#11788) AS max(avg_tmpr_c#11712)#11730, finalmerge_min(merge min#11790) AS min(avg_tmpr_f#11713)#11731, finalmerge_max(merge max#11792) AS max(avg_tmpr_f#11713)#11732]
Aggregate Attributes [4]: [min(avg_tmpr_c#11712)#11729, max(avg_tmpr_c#11712)#11730, min(avg_tmpr_f#11713)#11731, max(avg_tmpr_f#11713)#11732]
Results [12]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, min(avg_tmpr_c#11712)#11729 AS min_c#11684, max(avg_tmpr_c#11712)#11730 AS max_c#11685, min(avg_tmpr_f#11713)#11731 AS min_f#11686, max(avg_tmpr_f#11713)#11732 AS max_f#11687, (max(avg_tmpr_c#11712)#11730 - min(avg_tmpr_c#11712)#11729) AS _w0#11780]

(5) Exchange
Input [12]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, min_c#11684, max_c#11685, min_f#11686, max_f#11687, _w0#11780]
Arguments: hashpartitioning(year#11722, month#11723, 200), ENSURE_REQUIREMENTS, [plan_id=5146]

(6) Sort
Input [12]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, min_c#11684, max_c#11685, min_f#11686, max_f#11687, _w0#11780]
Arguments: [year#11722 ASC NULLS FIRST, month#11723 ASC NULLS FIRST, _w0#11780 DESC NULLS LAST], false, 0

(7) RunningWindowFunction
Input [12]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, min_c#11684, max_c#11685, min_f#11686, max_f#11687, _w0#11780]
Arguments: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, min_c#11684, max_c#11685, min_f#11686, max_f#11687, _w0#11780 AS diff_c#11688, (max_f#11687 - min_f#11686) AS diff_f#11689, row_number() windowspecdefinition(year#11722, month#11723, _w0#11780 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS diff_rank#11690], [year#11722, month#11723], [_w0#11780 DESC NULLS LAST], false

(8) Filter
Input [14]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, min_c#11684, max_c#11685, min_f#11686, max_f#11687, diff_c#11688, diff_f#11689, diff_rank#11690]
Condition : (diff_rank#11690 <= 10)

(9) AdaptiveSparkPlan
Output [14]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, min_c#11684, max_c#11685, min_f#11686, max_f#11687, diff_c#11688, diff_f#11689, diff_rank#11690]
Arguments: isFinalPlan=false

(10) AtomicReplaceTableAsSelect
Input [14]: [id#11717, name#11720, country#11715, city#11714, address#11711, year#11722, month#11723, min_c#11684, max_c#11685, min_f#11686, max_f#11687, diff_c#11688, diff_f#11689, diff_rank#11690]
Arguments: [num_affected_rows#11811L, num_inserted_rows#11812L], com.databricks.sql.managedcatalog.UnityCatalogV2Proxy@389e3a8e, datalake.hotel_tempr_ranks, Filter (diff_rank#11690 <= 10), TableSpec(Map(),None,Map(),Some(abfss://data@sttpdcsp02westeurope.dfs.core.windows.net/datalake/hotel_tempr_ranks),None,None,false,Set()), [], true, org.apache.spark.sql.execution.datasources.v2.DataSourceV2Strategy$$Lambda$8612/1685805851@21ec3836
